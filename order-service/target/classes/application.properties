spring.application.name=order
server.port=8084

spring.datasource.driver-class-name=org.postgresql.Driver
spring.datasource.url=jdbc:postgresql://localhost:5432/OrderDB
spring.datasource.username=postgres
spring.datasource.password=westa852

spring.sql.init.mode=always

spring.jpa.generate-ddl=true
spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=create-drop
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.show_sql=true
spring.jpa.properties.hibernate.format_sql=true

#Kafka producer
spring.kafka.producer.bootstrap-servers=localhost:9092
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
spring.kafka.producer.properties.spring.json.type.mapping=event:com.example.orderservice.domain.Order

#Kafka consumer
#spring.kafka.consumer.bootstrap-servers=localhost:9092
#spring.kafka.consumer.group-id=group-id
#spring.kafka.consumer.auto-offset-reset=earliest
#spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
#spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
#spring.kafka.consumer.properties.spring.json.trusted.packages=*

#kafka.server=localhost:9092
#kafka.group.id=server.mygoup

eureka.client.service-url.defaultZone=http://localhost:8081/eureka
#??? ????? ???? ?????????? ???????? ???? js ????? ???????? ? update
spring.data.rest.return-body-on-create=true
spring.data.rest.return-body-on-update=true

#spring.jackson.serialization.fail-on-empty-beans=false

#keyclock
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=http://localhost:8888/auth/realms/online-shop-microservice/protocol/openid-connect/certs


#для того, чтобы каждый инстанс имел уникальный id
eureka.instance.instance-id=${spring.application.name}:${random.uuid}
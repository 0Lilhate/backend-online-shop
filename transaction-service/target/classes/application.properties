spring.application.name=transaction
server.port=8085

stripe.sercret-key=pk_test_51LyhseC8rqdIteMdueiHpwmIk4dyJZZwU3MGICZkMT3hfyLSFQQ1hsvKOd4a6PsKnAmLs9Q4HTpNXMmJ3KTLENk100Ns90Zeek
stripr.public-key=sk_test_51LyhseC8rqdIteMdLbjoCjO4si4b6AOOFuFcV3VPMSTA0RmIN2ABJFQAg8U6tDBD6LW7kCLRWNRz346RgF2AAa5500M2Iyws2d


#Kafka producer
spring.kafka.producer.bootstrap-servers=localhost:9092
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
spring.kafka.producer.properties.spring.json.type.mapping=event:com.example.transactionservice.model.PaymentObject

#Kafka consumer
spring.kafka.consumer.bootstrap-servers=localhost:9092
spring.kafka.template.default-topic=transaction
spring.kafka.consumer.group-id=transactionId
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
spring.kafka.consumer.properties.spring.json.type.mapping=event:com.example.transactionservice.model.Order


eureka.client.service-url.defaultZone=http://localhost:8081/eureka
#??? ????? ???? ?????????? ???????? ???? js ????? ???????? ? update
spring.data.rest.return-body-on-create=true
spring.data.rest.return-body-on-update=true

#spring.jackson.serialization.fail-on-empty-beans=false

#keyclock
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=http://localhost:8888/auth/realms/online-shop-microservice/protocol/openid-connect/certs


#для того, чтобы каждый инстанс имел уникальный id
eureka.instance.instance-id=${spring.application.name}:${random.uuid}